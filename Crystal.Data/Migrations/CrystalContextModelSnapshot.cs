// <auto-generated />
using Crystal.Data.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Crystal.Data.Migrations
{
    [DbContext(typeof(CrystalContext))]
    partial class CrystalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("crystal")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Crystal.Domain.Entidades.Departamento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("Varchar(20)")
                        .HasColumnName("Nombre");

                    b.HasKey("ID");

                    b.ToTable("departamento");
                });

            modelBuilder.Entity("Crystal.Domain.Entidades.Direccion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Calle")
                        .HasMaxLength(20)
                        .HasColumnType("Varchar(20)")
                        .HasColumnName("Calle");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("Varchar(20)")
                        .HasColumnName("Ciudad");

                    b.Property<int>("EmpleadoID")
                        .HasColumnType("int");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("Varchar(20)")
                        .HasColumnName("Pais");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("Varchar(20)")
                        .HasColumnName("Telefono");

                    b.HasKey("ID");

                    b.HasIndex("EmpleadoID")
                        .IsUnique();

                    b.ToTable("direccion");
                });

            modelBuilder.Entity("Crystal.Domain.Entidades.Empleado", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("Varchar(20)")
                        .HasColumnName("Apellido");

                    b.Property<string>("Correo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Correo")
                        .HasComputedColumnSql("[Nombre] + '.' + [Apellido] + '@crystal.com.do'");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("Varchar(20)")
                        .HasColumnName("Nombre");

                    b.Property<int>("PuestoId")
                        .HasColumnType("int");

                    b.Property<string>("Usuario")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Usuario")
                        .HasComputedColumnSql("[Nombre] + '.' + [Apellido]");

                    b.HasKey("ID");

                    b.HasIndex("PuestoId");

                    b.ToTable("empleados");
                });

            modelBuilder.Entity("Crystal.Domain.Entidades.Puesto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartamentoID")
                        .HasColumnType("int");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("Varchar(20)")
                        .HasColumnName("Rol");

                    b.Property<double>("Sueldo")
                        .HasColumnType("double")
                        .HasColumnName("Sueldo");

                    b.HasKey("ID");

                    b.HasIndex("DepartamentoID");

                    b.ToTable("puesto");
                });

            modelBuilder.Entity("Crystal.Domain.Entidades.Direccion", b =>
                {
                    b.HasOne("Crystal.Domain.Entidades.Empleado", "Empleado")
                        .WithOne("Direccion")
                        .HasForeignKey("Crystal.Domain.Entidades.Direccion", "EmpleadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Crystal.Domain.Entidades.Empleado", b =>
                {
                    b.HasOne("Crystal.Domain.Entidades.Puesto", "Puesto")
                        .WithMany("Empleados")
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Puesto");
                });

            modelBuilder.Entity("Crystal.Domain.Entidades.Puesto", b =>
                {
                    b.HasOne("Crystal.Domain.Entidades.Departamento", "Departamento")
                        .WithMany("Puestos")
                        .HasForeignKey("DepartamentoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Crystal.Domain.Entidades.Departamento", b =>
                {
                    b.Navigation("Puestos");
                });

            modelBuilder.Entity("Crystal.Domain.Entidades.Empleado", b =>
                {
                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("Crystal.Domain.Entidades.Puesto", b =>
                {
                    b.Navigation("Empleados");
                });
#pragma warning restore 612, 618
        }
    }
}
